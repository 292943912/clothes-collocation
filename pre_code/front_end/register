import React, { Component } from 'react';
import http from "./http";
import {
    StyleSheet,
    Text,
    View,
    Image,
    Animated,
    TouchableOpacity,
    ImageBackground,
    ScrollView,
    TextInput,
    Alert,
    Button,
} from 'react-native';


class Blink extends Component {
  constructor(props) {
    super(props);
    this.state = { isShowingText: true };

    // 每1000毫秒对showText状态做一次取反操作
    setInterval(() => {
      this.setState(previousState => {
        return { isShowingText: !previousState.isShowingText };
      });
    }, 1000);
  }

  render() {
    // 根据当前showText的值决定是否显示text内容
    if (!this.state.isShowingText) {
      return null;
    }

    return (
      <Text>{this.props.text}</Text>
    );
  }
}

class FadeInView extends React.Component {
  state = {
    fadeAnim: new Animated.Value(0),  // 透明度初始值设为0
  }

  componentDidMount() {
    Animated.timing(                  // 随时间变化而执行动画
      this.state.fadeAnim,            // 动画中的变量值
      {
        toValue: 1,                   // 透明度最终变为1，即完全不透明
        duration: 5000,              // 让动画持续一段时间
      }
    ).start();                        // 开始执行动画
  }

  render() {
    let { fadeAnim } = this.state;

    return (
      <Animated.View                 // 使用专门的可动画化的View组件
        style={{
          ...this.props.style,
          opacity: fadeAnim,         // 将透明度指定为动画变量值
        }}
      >
        {this.props.children}
      </Animated.View>
    );
  }
}

export default class FirstPage extends Component {

    username = '';  //保存用户名
        password = '';  //保存密码
        confirmPassword = '';  //保存确认密码
        email='';
        flag='';

        /**
         * 当用户名输入框值改变时，保存改变的值
         * @param  {[type]} newUsername [输入的用户名]
         */
        onUsernameChanged = (newUsername) => {
            console.log(newUsername);//运行后可以在输入框随意输入内容并且查看log验证！
            this.username = newUsername;
        };

        /**
         * 当密码输入框值改变时，保存改变的值
         * @param  {[type]} newUsername [输入的密码]
         */
        onPasswordChanged = (newPassword) => {
            console.log(newPassword);//运行后可以在输入框随意输入内容并且查看log验证！
            this.password = newPassword;
        };
        onEmailChanged = (newEmail) => {
                    console.log(newEmail);//运行后可以在输入框随意输入内容并且查看log验证！
                    this.email = newEmail;
                };

        /**
         * 当确认密码输入框值改变时，保存改变的值
         * @param  {[type]} newUsername [输入的确认密码]
         */
        onConfirmPasswordChanged = (newConfirmPassword) => {
            console.log(newConfirmPassword);//运行后可以在输入框随意输入内容并且查看log验证！
            this.confirmPassword = newConfirmPassword;
        }

        /**
         * 点击空白处使输入框失去焦点
         */
        blurTextInput = () => {
            this.refs.username.blur();
            this.refs.password.blur();
            this.refs.confirmPassword.blur();
        }

        /**
         * 注册按钮，根据输入的内容判断注册是否成功
         */
        register = () => {
            if (this.username != '' && this.password != '') {
                if (this.username != 'james') {
                    if (this.password === this.confirmPassword) {
              //  let value = this.email;
                //let model= new RegExp (/^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$/);
               //  if(model.test(value))
                 //  {
                        let value={
                        account:this.username,
                        password:this.password,
                        phone:this.email
                        }
                        http.post('http://192.168.137.1:8762/addUser', value)
                                        .catch(err => console.log(err))

                        Alert.alert("注册成功",[{text: '确定', onPress: () => { goBack(); }}])
               // else window.alert('请检查邮箱格式！')
}
                    else {
                        Alert.alert("注册失败","密码与确认密码不同");
                    }
                } else {
                    Alert.alert("注册失败","此用户名已经被注册");
                }
            } else {
                Alert.alert("注册失败","用户名或密码不能为空");
            }
        };

    render() {
        const { navigate } = this.props.navigation;
        return (
         <ScrollView>
        <ImageBackground style={{ flex: 1 }}
                  source={require('../img/background.jpg')}>
            <View style={{flex: 1, alignItems: 'center', justifyContent: 'center' }}>
           <FadeInView style={styles.titleBackground}>
                                                      <Text style={styles.title}>注册</Text>
                       </FadeInView>
            <TouchableOpacity
                            activeOpacity={1.0}  //设置背景被点击时，透明度不变
                            onPress={this.blurTextInput}  //添加点击事件
                            style={styles.container}>
                            <View
                                style={styles.inputBox1}>
                                <TextInput
                                    ref="username"  //添加描述
                                    onChangeText={this.onUsernameChanged}  //添加值改变事件
                                    style={styles.input}
                                    autoCapitalize='none'  //设置首字母不自动大写
                                    underlineColorAndroid={'transparent'}  //将下划线颜色改为透明
                                    placeholderTextColor={'#ccc'}  //设置占位符颜色
                                    placeholder={'用户名'}  //设置占位符
                                />
                            </View>
                            <View
                                style={styles.inputBox}>
                                <TextInput
                                    ref="password"  //添加描述
                                    onChangeText={this.onPasswordChanged}  //添加值改变事件
                                    style={styles.input}
                                    secureTextEntry={true}  //设置为密码输入框
                                    autoCapitalize='none'  //设置首字母不自动大写
                                    underlineColorAndroid={'transparent'}  //将下划线颜色改为透明
                                    placeholderTextColor={'#ccc'}  //设置占位符颜色
                                    placeholder={'密码'}  //设置占位符
                                />
                            </View>
                            <View
                                style={styles.inputBox}>
                                <TextInput
                                    ref="confirmPassword"  //添加描述
                                    onChangeText={this.onConfirmPasswordChanged}  //添加值改变事件
                                    style={styles.input}
                                    secureTextEntry={true}  //设置为密码输入框
                                    autoCapitalize='none'  //设置首字母不自动大写
                                    underlineColorAndroid={'transparent'}  //将下划线颜色改为透明
                                    placeholderTextColor={'#ccc'}  //设置占位符颜色
                                    placeholder={'确认密码'}  //设置占位符
                                />
                            </View>
                            <View
                                                            style={styles.inputBox}>
                                                            <TextInput
                                                                ref="email"  //添加描述
                                                                onChangeText={this.omEmailChanged}  //添加值改变事件
                                                                style={styles.input}
                                                                autoCapitalize='none'  //设置首字母不自动大写
                                                                underlineColorAndroid={'transparent'}  //将下划线颜色改为透明
                                                                placeholderTextColor={'#ccc'}  //设置占位符颜色
                                                                placeholder={'邮箱'}  //设置占位符
                                                            />
                                                        </View>
                            <TouchableOpacity
                                onPress={this.register}  //添加点击事件
                                style={styles.button}>
                                <Text
                                    style={styles.btText}>注册</Text>
                            </TouchableOpacity>
                        </TouchableOpacity>
<Image
                                                      source={require('../img/test4.png')}
                                                      style={styles.thumbnail}
                                                      />
            </View>
            </ImageBackground>
             </ScrollView>
        );
    }
}

const styles = StyleSheet.create({
 titleBackground:{
   width: 400,
   height: 50,
   backgroundColor:  '#4682B4'
   },
   title:{
   fontSize: 28,
   textAlign: 'center',
   margin: 10
   },
     container: {
                 flex: 1,
                 justifyContent: 'center',
                 alignItems: 'center',
                 backgroundColor:'rgba(187,255,255,0)',
             },
      input: {
                  width: 200,
                  height: 40,
                  fontSize: 20,
                  color: '#000000',//输入框输入的文本为黑色
              },
              inputBox: {
                  flexDirection: 'row',
                  justifyContent: 'center',
                  alignItems: 'center',
                  width: 280,
                  height: 50,
                  borderRadius: 8,
                  backgroundColor: '#F0FFFF',
                  marginBottom: 8,
              },
              inputBox1: {
                                  flexDirection: 'row',
                                  justifyContent: 'center',
                                  alignItems: 'center',
                                  width: 280,
                                  height: 50,
                                  borderRadius: 8,
                                  backgroundColor: '#F0FFFF',
                                  marginBottom: 8,
                                   marginTop: 40
                              },
              button: {
                  height: 50,
                  width: 280,
                  justifyContent: 'center',
                  alignItems: 'center',
                  borderRadius: 8,
                  backgroundColor: '#4682B4',
                  marginTop: 20,
              },
        btText: {
            color: '#fff',
            fontSize: 20,
        },
        thumbnail: {
                width: 545/6,
                height: 765/6,

                alignSelf:"center",
                marginTop: 50,
                        marginBottom: 200
              }




});
